
cbuffer cbVoxelGrid : register(b0) {
	float g_matModelToVoxel0;
	float g_matModelToVoxel1;
	float g_matModelToVoxel2;
	float g_matModelToVoxel3;
	float g_matModelToVoxel4;
	float g_matModelToVoxel5;
	float g_matModelToVoxel6;
	float g_matModelToVoxel7;
	float g_matModelToVoxel8;
	float g_matModelToVoxel9;
	float g_matModelToVoxel10;
	float g_matModelToVoxel11;
	float g_matModelToVoxel12;
	float g_matModelToVoxel13;
	float g_matModelToVoxel14;
	float g_matModelToVoxel15;
	row_major float4x4 g_matModelToVoxel;

	uint2 g_stride;

	uint3 g_gridSize;
};

cbuffer cbModelInput : register(b1) {
	uint g_numModelTriangles;
	uint g_vertexFloatStride;
};

//==============================================================================================================================================================
#pragma kernel CS_VoxelizeSolid

RWByteAddressBuffer g_rwbufVoxels : register(u1);

RWStructuredBuffer<float> g_bufVertices : register(t0);
RWStructuredBuffer<uint> g_bufIndices : register(t1);

[numthreads(256, 1, 1)]
void CS_VoxelizeSolid(uint gtidx : SV_GroupIndex, uint3 gid : SV_GroupID) {
	const uint c_numthreads = 256;
	const uint c_groupCountX = 256;

	// determine triangle
	const uint tri = gtidx + gid.x * c_numthreads + gid.y * c_numthreads * c_groupCountX;

	if(tri >= g_numModelTriangles)
		return;

	// load triangle's vertices and order them ascending by index
	uint3 indices;
	indices.x = g_bufIndices[tri * 3];
	indices.y = g_bufIndices[tri * 3 + 1];
	indices.z = g_bufIndices[tri * 3 + 2];

	uint i0 = min(indices.x, indices.y);
	uint i1 = max(indices.x, indices.y);

	indices.x = min(i0, indices.z);
	i0        = max(i0, indices.z);
	indices.y = min(i1, i0);
	indices.z = max(i1, i0);

	float3 v0, v1, v2;
	v0.x = g_bufVertices[indices.x * g_vertexFloatStride];
	v0.y = g_bufVertices[indices.x * g_vertexFloatStride + 1];
	v0.z = g_bufVertices[indices.x * g_vertexFloatStride + 2];
	v1.x = g_bufVertices[indices.y * g_vertexFloatStride];
	v1.y = g_bufVertices[indices.y * g_vertexFloatStride + 1];
	v1.z = g_bufVertices[indices.y * g_vertexFloatStride + 2];
	v2.x = g_bufVertices[indices.z * g_vertexFloatStride];
	v2.y = g_bufVertices[indices.z * g_vertexFloatStride + 1];
	v2.z = g_bufVertices[indices.z * g_vertexFloatStride + 2];

	// transform vertices to voxel space

	g_matModelToVoxel[0][0] = g_matModelToVoxel0;
	g_matModelToVoxel[0][1] = g_matModelToVoxel1;
	g_matModelToVoxel[0][2] = g_matModelToVoxel2;
	g_matModelToVoxel[0][3] = g_matModelToVoxel3;
	g_matModelToVoxel[1][0] = g_matModelToVoxel4;
	g_matModelToVoxel[1][1] = g_matModelToVoxel5;
	g_matModelToVoxel[1][2] = g_matModelToVoxel6;
	g_matModelToVoxel[1][3] = g_matModelToVoxel7;
	g_matModelToVoxel[2][0] = g_matModelToVoxel8;
	g_matModelToVoxel[2][1] = g_matModelToVoxel9;
	g_matModelToVoxel[2][2] = g_matModelToVoxel10;
	g_matModelToVoxel[2][3] = g_matModelToVoxel11;
	g_matModelToVoxel[3][0] = g_matModelToVoxel12;
	g_matModelToVoxel[3][1] = g_matModelToVoxel13;
	g_matModelToVoxel[3][2] = g_matModelToVoxel14;
	g_matModelToVoxel[3][3] = g_matModelToVoxel15;


	//g_stride[0] = g_stride0;
	//g_stride[1] = g_stride1;

	//g_gridSize[0] = g_gridSize0;
	//g_gridSize[1] = g_gridSize1;
	//g_gridSize[2] = g_gridSize2;

	float4 v;
	v = mul(g_matModelToVoxel, float4(v0, 1.0)); v0 = v.xyz / v.w;
	v = mul(g_matModelToVoxel, float4(v1, 1.0)); v1 = v.xyz / v.w;
	v = mul(g_matModelToVoxel, float4(v2, 1.0)); v2 = v.xyz / v.w;

	// determine bounding box in xz
	const float2 vMin = float2(min(v0.x, min(v1.x, v2.x)), min(v0.z, min(v1.z, v2.z)));
	const float2 vMax = float2(max(v0.x, max(v1.x, v2.x)), max(v0.z, max(v1.z, v2.z)));

	// derive bounding box of covered voxel columns
	const int2 voxMin = int2(max(0, int(floor(vMin.x + 0.4999))),
	                         max(0, int(floor(vMin.y + 0.4999))));
	const int2 voxMax = int2(min(int(g_gridSize.x), int(floor(vMax.x + 0.5))),
	                         min(int(g_gridSize.z), int(floor(vMax.y + 0.5))));

	// check if any voxel columns are covered at all
	if(voxMin.x >= voxMax.x || voxMin.y >= voxMax.y)
		return;

	// triangle setup
	const float3 e0 = v1-v0;
	const float3 e1 = v2-v1;
	const float3 e2 = v2-v0;
	const float3 n = cross(e0, e2);

	if(n.y == 0.0)
		return;

	// triangle's plane
	const float dTri = -dot(n, v0);

	// edge equations
	float2 ne0 = float2(-e0.z,  e0.x);
	float2 ne1 = float2(-e1.z,  e1.x);
	float2 ne2 = float2( e2.z, -e2.x);
	if(n.y > 0.0) {
		ne0 = -ne0;
		ne1 = -ne1;
		ne2 = -ne2;
	}

	const float de0 = -(ne0.x * v0.x + ne0.y * v0.z);
	const float de1 = -(ne1.x * v1.x + ne1.y * v1.z);
	const float de2 = -(ne2.x * v0.x + ne2.y * v0.z);

	// determine whether edge is left edge or top edge
	const float eps = 1.175494351e-38f;		// smallest normalized positive number

	float ce0 = 0.0;
	float ce1 = 0.0;
	float ce2 = 0.0;

	if(ne0.x > 0.0 || (ne0.x == 0.0 && ne0.y < 0.0))
		ce0 = eps;
	if(ne1.x > 0.0 || (ne1.x == 0.0 && ne1.y < 0.0))
		ce1 = eps;
	if(ne2.x > 0.0 || (ne2.x == 0.0 && ne2.y < 0.0))
		ce2 = eps;

	const float nyInv = 1.0 / n.y;

	// determine covered pixels/voxel columns
	for(int z = voxMin.y; z < voxMax.y; z++) {
		for(int x = voxMin.x; x < voxMax.x; x++) {
			// pixel center
			float2 p = float2(float(x) + 0.5, float(z) + 0.5);

			// test whether pixel is inside triangle
			// if it is exactly on an edge, the ce* term makes the expression positive if the edge is a left or top edge
			if((dot(ne0, p) + de0) + ce0 <= 0.0) continue;
			if((dot(ne1, p) + de1) + ce1 <= 0.0) continue;
			if((dot(ne2, p) + de2) + ce2 <= 0.0) continue;

			// project p onto plane along y axis (ray/plane intersection)
			const float py = -(p.x * n.x + p.y * n.z + dTri) * nyInv;

			int y = max(0, int(py + 0.5));
			if(int(g_gridSize.y) <= y)
				continue;

			// flip voxel's state
			uint address = uint(x) * g_stride.x + uint(y) * g_stride.y + (uint(z) >> 5) * 4;
			g_rwbufVoxels.InterlockedXor(address, 1u << (z & 31));
		}
	}
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma kernel CS_VoxelizeSolid_Propagate

RWStructuredBuffer<float> buffer1;

RWByteAddressBuffer g_rwbufVoxelsProp : register(u2);

[numthreads(256, 1, 1)]
void CS_VoxelizeSolid_Propagate(uint gtidx : SV_GroupIndex, uint3 gid : SV_GroupID) {
	const uint c_numthreads = 256;
	const uint c_groupCountX = 256;

	const uint section = gtidx + gid.x * c_numthreads + gid.y * c_numthreads * c_groupCountX;

	if(section >= (g_stride.y >> 2))
		return;

	uint address = section * 4;
	uint lastBlock = g_rwbufVoxelsProp.Load(address);
	for(uint y = 1; y < g_gridSize.y; y++) {
		address += g_stride.y;

		uint currBlock = g_rwbufVoxelsProp.Load(address);
		if(lastBlock != 0) {
			currBlock = currBlock ^ lastBlock;
			g_rwbufVoxelsProp.Store(address, currBlock);
			buffer1[1] = g_stride.y;
		}
		buffer1[0] = lastBlock;
		lastBlock = currBlock;
	}
}

//==============================================================================================================================================================